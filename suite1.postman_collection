{
	"variables": [],
	"info": {
		"name": "User create store and item",
		"_postman_id": "7e54f7d1-820c-a9a2-f251-3cc7268c9d20",
		"description": "",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "POST /register",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"const jsonData = JSON.parse(responseBody);",
							"const checkCode = (response, code) => responseCode.code === code;",
							"",
							"tests[\"Response time is less than 200ms\"] = responseTime < 200;",
							"tests[\"Status code is 201\"] = checkCode(responseCode.code, 201);",
							"tests[\"User created successfully\"] = jsonData.message == 'The user has been created'",
							"tests[\"Content-Type is application/json\"] = postman.getResponseHeader('Content-Type') === 'application/json'",
							"",
							""
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"function makeid() {",
							"  var text = \"\";",
							"  var possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";",
							"",
							"  for (var i = 0; i < 5; i++)",
							"    text += possible.charAt(Math.floor(Math.random() * possible.length));",
							"",
							"  return text;",
							"}",
							"",
							"postman.setEnvironmentVariable(\"username\", makeid());"
						]
					}
				}
			],
			"request": {
				"url": "{{url}}/register",
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"description": ""
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"username\": \"{{username}}\",\n\t\"password\": \"1234\"\n}"
				},
				"description": ""
			},
			"response": []
		},
		{
			"name": "POST /auth",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"const jsonData = JSON.parse(responseBody);",
							"",
							"postman.setEnvironmentVariable(\"access_token\", jsonData.access_token);",
							"",
							"const checkCode = (response, code) => responseCode.code === code;",
							"",
							"tests[\"Response time is less than 200ms\"] = responseTime < 200;",
							"tests[\"Status code is 200\"] = checkCode(responseCode.code, 200);",
							"tests[\"Return access_token\"] = jsonData.access_token !== undefined",
							"tests[\"Content-Type is application/json\"] = postman.getResponseHeader('Content-Type') === 'application/json'"
						]
					}
				}
			],
			"request": {
				"url": "{{url}}/auth",
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"description": ""
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"username\": \"{{username}}\",\n\t\"password\": \"1234\"\n}"
				},
				"description": ""
			},
			"response": []
		},
		{
			"name": "POST /store/test_store",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"const jsonData = JSON.parse(responseBody);",
							"",
							"tests[\"Store name is returned\"] = jsonData.name === 'test_store';",
							"tests[\"Status code is 201\"] = responseCode.code === 201;",
							"postman.setEnvironmentVariable(\"store_id\", jsonData.id);"
						]
					}
				}
			],
			"request": {
				"url": "{{url}}/store/test_store",
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "JWT {{access_token}}",
						"description": ""
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"description": ""
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"description": ""
			},
			"response": []
		},
		{
			"name": "POST /item/test_item in test_store",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"const jsonData = JSON.parse(responseBody);",
							"",
							"tests[\"Store name is returned\"] = jsonData.name === 'test_item';",
							"tests[\"Store price is returned\"] = jsonData.price === 17.99;",
							"tests[\"Status code is 201\"] = responseCode.code === 201;"
						]
					}
				}
			],
			"request": {
				"url": "{{url}}/item/test_item",
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "JWT {{access_token}}",
						"description": ""
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"description": ""
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"store_id\": {{store_id}},\n\t\"price\": 17.99\n}"
				},
				"description": ""
			},
			"response": []
		},
		{
			"name": "DELETE /store/test_store",
			"request": {
				"url": "{{url}}/store/test_store",
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "JWT {{access_token}}",
						"description": ""
					}
				],
				"body": {},
				"description": ""
			},
			"response": []
		},
		{
			"name": "DELETE /item/test_item",
			"request": {
				"url": "{{url}}/item/test_item",
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "JWT {{access_token}}",
						"description": ""
					}
				],
				"body": {},
				"description": ""
			},
			"response": []
		}
	]
}